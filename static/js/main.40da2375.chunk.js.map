{"version":3,"sources":["CounterList.js","InputController.js","App.js","serviceWorker.js","index.js"],"names":["CounterList","props","buttonsMinus","buttonsPlus","i","push","className","onClick","counterPlusMinus","index","buttons","el","deleteCurrentCounter","resetCurrentCounter","InputController","useState","value","setInputValue","inputButtons","setInputButtons","type","onChange","e","target","addNewCounter","deleteAll","resetAll","sortButtonsMinMax","sorButtonsMaxMin","App","counter","setCounter","setButtons","val","result","map","filter","result1","sort","a","b","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40da2375.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction CounterList(props) {\n\n\n    const buttonsMinus = [];\n    const buttonsPlus = [];\n\n    for (let i = 1; i <= props.buttons; i++) {\n        buttonsMinus.push(<button className='list'\n                                  onClick={() => props.counterPlusMinus(props.index, -i)}>-{i}</button>)\n        buttonsPlus.push(<button className='list' onClick={() => props.counterPlusMinus(props.index, i)}>{i}</button>)\n    }\n\n    return (\n        <div>\n            {buttonsMinus}\n            <strong>{props.el}</strong>\n            {buttonsPlus}\n            <button className='app2' onClick={() => props.deleteCurrentCounter(props.index)}>Delete</button>\n            <button className='app' onClick={() => props.resetCurrentCounter(props.index)}>Reset</button>\n        </div>\n    );\n}\n\nexport default CounterList;\n","import React, {useState} from 'react';\n\n\nfunction InputController(props) {\n\n    const [value, setInputValue] = useState('')\n    const [inputButtons, setInputButtons] = useState('')\n\n    const inputValueHandler = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const inputButtonsHandler = (e) => {\n        setInputButtons(e.target.value)\n    }\n\n    const addButtonHandler = () => {\n        props.addNewCounter(value, inputButtons);\n        setInputValue('')\n        setInputButtons('')\n    }\n\n    return (\n        <div>\n            <label className='header1'><strong>+/- number:</strong></label>\n            {' '}\n            <input className='text' type='text' onChange={inputButtonsHandler} value={inputButtons}/>\n            {' '}\n            <label className='header1'><strong>value:</strong></label>\n            {' '}\n            <input className='text' type='text' onChange={inputValueHandler} value={value}/>\n            {' '}\n            <button className='app3' onClick={addButtonHandler}>Add new</button>\n            {' '}\n            <button className='app2' onClick={props.deleteAll}>Delete All</button>\n            {' '}\n            <button className='app' onClick={props.resetAll}>Reset All</button>\n            {' '}\n            <button className='app1' onClick={props.sortButtonsMinMax}>+/- min→max</button>\n            <button className='app1' onClick={props.sorButtonsMaxMin}>+/- max→min</button>\n        </div>\n    );\n}\n\nexport default InputController;\n","import React, {useState} from 'react';\nimport CounterList from \"./CounterList\";\nimport \"./index.css\";\nimport InputController from \"./InputController\";\n\n\nfunction App() {\n\n    const [counter, setCounter] = useState([])\n    const [buttons, setButtons] = useState([])\n\n    const addNewCounter = (value, inputButtons) => {\n        const result = [...counter]\n        result.push(value)\n        setCounter(result);\n\n        const result1 = [...buttons]\n        result1.push(inputButtons);\n        setButtons(result1);\n    }\n\n    const deleteAll = () => {\n        setCounter([])\n    }\n\n    const resetAll = () => {\n        const result = counter.map(el => el = 0)\n        setCounter(result)\n    }\n\n    const counterPlusMinus = (index, val) => {\n        const result = counter.map((el, i) => {\n            if (i === index) return el + val;\n            return el;\n        })\n        setCounter(result)\n    }\n\n    const deleteCurrentCounter = (index) => {\n        const result = counter.filter((el, i) => (i !== index) ? true : false)\n        setCounter(result)\n    }\n\n    const resetCurrentCounter = (index) => {\n        const result = counter.map((el, i) => (i === index) ? el = 0 : el)\n        setCounter(result)\n    }\n\n    const sortButtonsMinMax = () => {\n        const result = [...buttons]\n        result.sort((a, b) => a - b)\n        setButtons(result)\n    }\n\n    const sorButtonsMaxMin = () => {\n        const result = [...buttons]\n        result.sort((a, b) => b - a)\n        setButtons(result)\n    }\n\n\n    return (\n        <div>\n            <h2 className='header'>C O U N T E R</h2>\n\n            <InputController addNewCounter={addNewCounter} deleteAll={deleteAll} resetAll={resetAll}\n                             sortButtonsMinMax={sortButtonsMinMax} sorButtonsMaxMin={sorButtonsMaxMin}/>\n\n            {counter.map((el, i) => <CounterList el={el} key={Math.random()} index={i}\n                                                 buttons={buttons[i]}\n                                                 counterPlusMinus={counterPlusMinus}\n                                                 deleteCurrentCounter={deleteCurrentCounter}\n                                                 resetCurrentCounter={resetCurrentCounter}/>)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}